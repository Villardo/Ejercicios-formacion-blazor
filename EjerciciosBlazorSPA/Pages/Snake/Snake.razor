@page "/snake"
@using System.Timers
@implements IDisposable

<h3>Snake</h3>

<table class="game" runat="server">
    @for (var j = 0; j < MaxY; j++)
    {
        <tr>
            @for (var i = 0; i < MaxX; i++)
            {
                if (AppleX == i && AppleY == j)
                {
                    <td class="apple"></td>
                }
                else if (SnakeX == i && SnakeY == j)
                {
                    <td class="snake"></td>
                }
                else if (SnakeX == AppleX && SnakeY == AppleY)
                {
                    Score += 50;
                    CreateApple();

                }
                else if (SnakeX < 0 || SnakeX > MaxX || SnakeY < 0 || SnakeY > MaxY)
                {
                    TimerStop();
                    GameOver = true;
                }
                else
                {
                    <td class="board"></td>
                }
            }
        </tr>
    }
</table>

<p class="mt-3 ml-3">Valor contador: @Counter</p>
<p class="mt-3 ml-3">Puntos: @Score</p>

@if (GameOver)
{
    <h2>Has perdido</h2>
}

<input class="txtControl mb-2" type="text" @onkeydown="KeyboardEventHandler" />
<button class="btnPlay btn-block" @onclick="TimerStart">Jugar</button>

@code {
    public int MaxX { get; set; }
    public int MaxY { get; set; }
    public int AppleX { get; set; }
    public int AppleY { get; set; }
    public int SnakeX { get; set; }
    public int SnakeY { get; set; }
    public Random RandNum = new Random();
    private Timer MyTimer = new();
    private int Counter, Direction, Score;
    private bool GameOver = false;
    private const int 
        LEFT = 0,
        UP = 1,
        RIGHT = 2,
        DOWN = 3;
    private int lastDirection = RIGHT;

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "ArrowLeft":
                if (lastDirection != RIGHT)
                {
                    Direction = LEFT;

                }
                break;
            case "ArrowUp":
                if (lastDirection != DOWN)
                {
                    Direction = UP;
                }
                break;
            case "ArrowRight":
                if (lastDirection != LEFT)
                {
                    Direction = RIGHT;
                }
                break;
            case "ArrowDown":
                if (lastDirection != UP)
                {
                    Direction = DOWN;
                }
                break;
        }
    }

    protected override void OnInitialized()
    {
        MyTimer.Interval = 300;
        MyTimer.Elapsed += TimerEvent;
        MaxX = 20;
        MaxY = 20;
        Counter = 0;
        CreateApple();
    }

    private void CreateApple()
    {
        AppleX = RandNum.Next(0, MaxX);
        AppleY = RandNum.Next(0, MaxY);
    }

    private void TimerStart()
    {
        MyTimer.Start();
    }

    private void TimerStop()
    {
        MyTimer.Stop();
    }

    private void TimerEvent(object senter, ElapsedEventArgs e)
    {
        Counter++;
        switch (Direction)
        {
            case LEFT:
                SnakeX--;
                break;
            case UP:
                SnakeY--;
                break;
            case RIGHT:
                SnakeX++;
                break;
            case DOWN:
                SnakeY++;
                break;
        }
        lastDirection = Direction;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        MyTimer.Dispose();
    }
}