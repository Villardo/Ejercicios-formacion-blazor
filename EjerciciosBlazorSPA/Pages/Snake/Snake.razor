@page "/snake"
@using System.Timers
@implements IDisposable

<style>
    .snake {
        background-color: forestgreen;
        height: 1rem;
        width: 1rem;
    }

    .board {
        background-color:lightgrey;
        height: 1rem;
        width: 1rem;
    }

    .apple {
        background-color: orangered;
        height: 1rem;
        width: 1rem;
    }

</style>

<h3>Snake</h3>

<table runat="server" style="border: 5px solid black; width:auto;">
    @for (var j = 0; j < MaxY; j++)
    {
        <tr>
            @for (var i = 0; i < MaxX; i++)
            {
                if (AppleX == i && AppleY == j)
                {
                    <td class="apple"></td>
                }
                else if (SnakeX == i && SnakeY == j)
                {
                    <td class="snake"></td>
                }
                else if (SnakeX == AppleX && SnakeY == AppleY)
                {
                    AppleX = RandNum.Next(0, MaxX);
                    AppleY = RandNum.Next(0, MaxY);
                }
                else
                {
                    <td class="board"></td>
                }
            }
        </tr>
    }
</table>
<input class="mt-3" type="text" @onkeydown="KeyboardEventHandler" />
<p>Valor contador: @Counter</p>
<button @onclick="TimerStart">Jugar</button>

@code {
    public int MaxX { get; set; }
    public int MaxY { get; set; }
    public int AppleX { get; set; }
    public int AppleY { get; set; }
    public int SnakeX { get; set; }
    public int SnakeY { get; set; }

    public Random RandNum = new Random();
    private Timer MyTimer = new();
    private int Counter;
    private int Direction;

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            //error potencial
            case "ArrowLeft":
                Direction = 0;
                Console.WriteLine("LEFT");
                break;
            case "ArrowUp":
                Direction = 1;
                Console.WriteLine("UP");
                break;
            case "ArrowRight":
                Direction = 2;
                Console.WriteLine("RIGHT");
                break;
            case "ArrowDown":
                Direction = 3;
                Console.WriteLine("DOWN");
                break;
            default:
                break;
        }
    }

    protected override void OnInitialized()
    {
        MaxX = 20;
        MaxY = 20;
        AppleX = RandNum.Next(0, MaxX);
        AppleY = RandNum.Next(0, MaxY);
        MyTimer.Interval = 1000;
        MyTimer.Elapsed += TimerEvent;
        Counter = 0;
    }

    private void CreateApple()
    {
        AppleX = RandNum.Next(0, MaxX);
        AppleY = RandNum.Next(0, MaxY);
    }

    private void TimerStart()
    {
        MyTimer.Start();
    }

    private void TimerStop()
    {
        MyTimer.Stop();
    }

    private void TimerEvent(object senter, ElapsedEventArgs e)
    {
        Counter++;
        switch (Direction)
        {
            case 0: // Left
                SnakeX--;
                break;
            case 1: // Up
                SnakeY--;
                break;
            case 2: // Right
                SnakeX++;
                break;
            case 3: // Down
                SnakeY++;
                break;
            default:
                SnakeX++;
                break;
        }
        Console.WriteLine($"Valor del contador {Counter}");
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        MyTimer.Dispose();
    }
}